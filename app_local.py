#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Analisador de Tributos em PDFs - Vers√£o Local Desktop
Aplica√ß√£o Flask que roda localmente e abre automaticamente no navegador
Simula uma aplica√ß√£o desktop sem limita√ß√µes de timeout
"""

import os
import re
import csv
import io
import webbrowser
import threading
import time
from datetime import datetime
from werkzeug.utils import secure_filename
from flask import Flask, render_template, request, jsonify, send_file
import pdfplumber
import requests
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'local-desktop-key')
app.config['MAX_CONTENT_LENGTH'] = 500 * 1024 * 1024  # 500MB max (sem limita√ß√µes!)

# Configura√ß√µes para vers√£o local (sem limita√ß√µes de timeout)
UPLOAD_FOLDER = 'uploads'
ALLOWED_EXTENSIONS = {'pdf'}
MARITACA_API_KEY = os.environ.get('MARITACA_API_KEY', '')

# Cria pasta de uploads se n√£o existir
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

def allowed_file(filename):
    """Verifica se o arquivo tem extens√£o permitida"""
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

def extract_text_from_pdf(pdf_path):
    """
    Extrai texto do PDF preservando formata√ß√£o (SEM LIMITA√á√ïES)
    
    Args:
        pdf_path (str): Caminho para o arquivo PDF
        
    Returns:
        str: Texto extra√≠do ou None se erro
    """
    try:
        text = ""
        with pdfplumber.open(pdf_path) as pdf:
            total_pages = len(pdf.pages)
            print(f"üìÑ Processando {total_pages} p√°ginas...")
            
            for i, page in enumerate(pdf.pages):
                print(f"üìñ Processando p√°gina {i+1}/{total_pages}")
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n\n"
        
        if not text.strip():
            return None
            
        print(f"‚úÖ Texto extra√≠do: {len(text)} caracteres")
        return text
        
    except Exception as e:
        print(f"‚ùå Erro ao extrair texto do PDF: {e}")
        return None

def search_tributos_in_text(text, tributos):
    """
    Busca men√ß√µes aos tributos no texto usando regex (SEM LIMITA√á√ïES)
    
    Args:
        text (str): Texto do PDF
        tributos (list): Lista de tributos para buscar
        
    Returns:
        list: Lista de dicion√°rios com trechos encontrados
    """
    results = []
    lines = text.split('\n')
    
    print(f"üîç Buscando em {len(lines)} linhas de texto...")
    
    for tributo in tributos:
        print(f"üéØ Buscando: {tributo}")
        # Regex com word boundaries para evitar falsos positivos
        pattern = r'\b' + re.escape(tributo.strip()) + r'\b'
        
        matches_found = 0
        for i, line in enumerate(lines):
            if re.search(pattern, line, re.IGNORECASE):
                # Captura contexto: 15 linhas antes e depois (mais contexto que a vers√£o web)
                start_idx = max(0, i - 15)
                end_idx = min(len(lines), i + 16)
                
                context_lines = lines[start_idx:end_idx]
                context = '\n'.join(context_lines)
                
                results.append({
                    'tributo': tributo.strip(),
                    'linha_encontrada': line.strip(),
                    'contexto': context,
                    'linha_numero': i + 1
                })
                
                matches_found += 1
        
        print(f"‚úÖ {tributo}: {matches_found} ocorr√™ncias encontradas")
    
    return results

def extract_entities_with_regex(text):
    """
    Extrai nomes de empresas usando regex (SEM LIMITA√á√ïES)
    
    Args:
        text (str): Texto para an√°lise
        
    Returns:
        list: Lista de poss√≠veis nomes de empresas
    """
    entities = set()
    
    # Padr√µes para identificar empresas (mais abrangentes)
    patterns = [
        # CNPJ
        r'\d{2}\.\d{3}\.\d{3}/\d{4}-\d{2}',
        # Raz√£o social completa
        r'[A-Z√Å√ä√á√ï][A-Z√Å√ä√á√ï\s]{10,80}(?:LTDA|ME|EIRELI|S\.A\.|SA|EPP|MICROEMPRESA|EMPRESA)',
        # Nomes pr√≥prios em mai√∫sculo
        r'[A-Z√Å√ä√á√ï][A-Z√Å√ä√á√ï\s]{8,50}(?=\s|$)',
        # Empresas com n√∫meros
        r'[A-Z√Å√ä√á√ï][A-Z√Å√ä√á√ï\s\d]{5,50}(?:LTDA|ME|EIRELI)',
    ]
    
    for pattern in patterns:
        try:
            matches = re.findall(pattern, text, re.IGNORECASE)
            for match in matches:
                cleaned = match.strip()
                if len(cleaned) > 5 and not cleaned.isdigit():
                    entities.add(cleaned)
        except:
            continue
    
    return list(entities)

def extract_entities_with_maritaca(text):
    """
    Extrai entidades usando a API Maritaca AI (SEM LIMITA√á√ïES DE TIMEOUT)
    
    Args:
        text (str): Texto para an√°lise
        
    Returns:
        list: Lista de nomes de empresas identificadas
    """
    if not MARITACA_API_KEY or MARITACA_API_KEY == 'sua_chave_aqui':
        return []
    
    try:
        from openai import OpenAI
        
        client = OpenAI(
            api_key=MARITACA_API_KEY,
            base_url="https://chat.maritaca.ai/api"
        )
        
        # Limita o texto para a API (mas mais generoso que a vers√£o web)
        text_limited = text[:2000]  # 2KB ao inv√©s de 500 bytes
        
        response = client.chat.completions.create(
            model="sabiazinho-3",
            messages=[
                {
                    "role": "system",
                    "content": "Voc√™ √© um especialista em identificar nomes de empresas em textos oficiais. Identifique todas as empresas mencionadas e forne√ßa apenas os nomes principais (removendo LTDA, ME, EIRELI, etc.)."
                },
                {
                    "role": "user",
                    "content": f"Identifique todas as empresas no texto abaixo:\n\n{text_limited}"
                }
            ],
            max_tokens=500,  # Mais tokens que a vers√£o web
            temperature=0.1
        )
        
        if response.choices[0].message.content:
            # Extrai nomes das empresas da resposta
            content = response.choices[0].message.content
            lines = content.split('\n')
            empresas = []
            
            for line in lines:
                line = line.strip()
                if line and not line.startswith(('Empresas', 'As empresas', 'Identifiquei')) and len(line) > 3:
                    # Remove numera√ß√£o e pontua√ß√£o
                    line = re.sub(r'^\d+[\.\-\)]\s*', '', line)
                    line = re.sub(r'^[\-\*]\s*', '', line)
                    if line:
                        empresas.append(line)
            
            return empresas
            
        return []
        
    except Exception as e:
        print(f"‚ö†Ô∏è Erro na API Maritaca: {e}")
        return []

def process_pdf_analysis(pdf_path, tributos_text):
    """
    Processa a an√°lise completa do PDF (SEM LIMITA√á√ïES)
    
    Args:
        pdf_path (str): Caminho para o PDF
        tributos_text (str): String com tributos separados por v√≠rgula
        
    Returns:
        dict: Resultados da an√°lise
    """
    try:
        print(f"üöÄ Iniciando an√°lise de: {os.path.basename(pdf_path)}")
        
        # Extrai texto do PDF
        text = extract_text_from_pdf(pdf_path)
        
        if not text:
            return {"error": "N√£o foi poss√≠vel extrair texto do PDF. Verifique se o arquivo cont√©m texto (n√£o √© apenas imagem)."}
        
        # Processa lista de tributos
        tributos = [t.strip() for t in tributos_text.split(',') if t.strip()]
        if not tributos:
            return {"error": "Nenhum tributo foi especificado para busca."}
        
        print(f"üéØ Buscando {len(tributos)} tributos: {', '.join(tributos)}")
        
        # Busca tributos no texto
        trechos_encontrados = search_tributos_in_text(text, tributos)
        
        if not trechos_encontrados:
            return {"error": "Nenhum dos tributos especificados foi encontrado no PDF."}
        
        print(f"üìã Processando {len(trechos_encontrados)} trechos encontrados...")
        
        # Extrai entidades para cada trecho
        results = []
        for i, trecho in enumerate(trechos_encontrados):
            print(f"üîç Processando trecho {i+1}/{len(trechos_encontrados)}")
            
            # Extra√ß√£o com regex
            entities_regex = extract_entities_with_regex(trecho['contexto'])
            
            # Extra√ß√£o com Maritaca AI
            entities_ai = extract_entities_with_maritaca(trecho['contexto'])
            
            # Combina resultados (remove duplicatas)
            all_entities = list(set(entities_regex + entities_ai))
            
            results.append({
                'tributo': trecho['tributo'],
                'linha_encontrada': trecho['linha_encontrada'],
                'contexto': trecho['contexto'],
                'linha_numero': trecho['linha_numero'],
                'empresas_identificadas': all_entities
            })
        
        print(f"‚úÖ An√°lise conclu√≠da! {len(results)} resultados processados")
        return {"success": True, "results": results, "total_encontrados": len(results)}
        
    except Exception as e:
        print(f"‚ùå Erro durante processamento: {str(e)}")
        return {"error": f"Erro durante processamento: {str(e)}"}

@app.route('/')
def index():
    """P√°gina inicial"""
    return render_template('index_local.html')

@app.route('/upload', methods=['POST'])
def upload_file():
    """Processa upload do arquivo PDF (SEM LIMITA√á√ïES)"""
    if 'file' not in request.files:
        return jsonify({"error": "Nenhum arquivo foi enviado"}), 400
    
    file = request.files['file']
    tributos = request.form.get('tributos', '')
    
    if file.filename == '':
        return jsonify({"error": "Nenhum arquivo foi selecionado"}), 400
    
    if not tributos.strip():
        return jsonify({"error": "Nenhum tributo foi especificado"}), 400
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        # Adiciona timestamp para evitar conflitos
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"{timestamp}_{filename}"
        filepath = os.path.join(UPLOAD_FOLDER, filename)
        
        try:
            print(f"üíæ Salvando arquivo: {filename}")
            file.save(filepath)
            
            # Mostra tamanho do arquivo
            size_mb = os.path.getsize(filepath) / (1024 * 1024)
            print(f"üìä Tamanho do arquivo: {size_mb:.1f} MB")
            
            # Processa o arquivo (SEM TIMEOUT!)
            result = process_pdf_analysis(filepath, tributos)
            
            # Remove arquivo tempor√°rio
            if os.path.exists(filepath):
                os.remove(filepath)
                print(f"üóëÔ∏è Arquivo tempor√°rio removido")
            
            return jsonify(result)
            
        except Exception as e:
            # Remove arquivo em caso de erro
            if os.path.exists(filepath):
                os.remove(filepath)
            print(f"‚ùå Erro: {str(e)}")
            return jsonify({"error": f"Erro ao processar arquivo: {str(e)}"}), 500
    
    return jsonify({"error": "Tipo de arquivo n√£o permitido. Apenas PDFs s√£o aceitos."}), 400

@app.route('/export_csv', methods=['POST'])
def export_csv():
    """Exporta resultados para CSV"""
    data = request.json
    
    if not data or 'results' not in data:
        return jsonify({"error": "Dados inv√°lidos para exporta√ß√£o"}), 400
    
    # Cria CSV em mem√≥ria
    output = io.StringIO()
    writer = csv.writer(output)
    
    # Cabe√ßalho
    writer.writerow(['Tributo', 'Linha Encontrada', 'N√∫mero da Linha', 'Empresas Identificadas', 'Contexto Completo'])
    
    # Dados
    for result in data['results']:
        empresas = '; '.join(result.get('empresas_identificadas', []))
        writer.writerow([
            result.get('tributo', ''),
            result.get('linha_encontrada', ''),
            result.get('linha_numero', ''),
            empresas,
            result.get('contexto', '').replace('\n', ' | ')
        ])
    
    # Prepara arquivo para download
    output.seek(0)
    csv_data = output.getvalue().encode('utf-8-sig')  # BOM para Excel
    
    return send_file(
        io.BytesIO(csv_data),
        mimetype='text/csv',
        as_attachment=True,
        download_name=f'analise_tributos_{datetime.now().strftime("%Y%m%d_%H%M%S")}.csv'
    )

@app.errorhandler(413)
def too_large(e):
    """Trata erro de arquivo muito grande"""
    return jsonify({"error": "Arquivo muito grande. Tamanho m√°ximo: 500MB"}), 413

def open_browser():
    """Abre o navegador automaticamente"""
    time.sleep(1.5)  # Aguarda o servidor iniciar
    webbrowser.open('http://127.0.0.1:8888')

def main():
    """Fun√ß√£o principal - simula aplica√ß√£o desktop"""
    print("=" * 60)
    print("üñ•Ô∏è  ANALISADOR DE TRIBUTOS - VERS√ÉO LOCAL DESKTOP")
    print("=" * 60)
    print("üöÄ Iniciando aplica√ß√£o local...")
    print("üåê Servidor rodando em: http://127.0.0.1:8888")
    print("üì± Abrindo navegador automaticamente...")
    print("‚ö†Ô∏è  Para fechar: Pressione Ctrl+C no terminal")
    print("=" * 60)
    
    # Abre navegador em thread separada
    threading.Thread(target=open_browser, daemon=True).start()
    
    # Inicia servidor Flask
    try:
        app.run(debug=False, host='127.0.0.1', port=8888, use_reloader=False)
    except KeyboardInterrupt:
        print("\nüõë Aplica√ß√£o encerrada pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro ao iniciar aplica√ß√£o: {e}")

if __name__ == '__main__':
    main() 