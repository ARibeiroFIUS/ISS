#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para gerar execut√°vel da aplica√ß√£o desktop
"""

import os
import sys
import subprocess
import shutil
from pathlib import Path

def build_executable():
    """Constr√≥i o execut√°vel usando PyInstaller"""
    
    print("üöÄ Iniciando build do execut√°vel...")
    
    # Verifica se o PyInstaller est√° instalado
    try:
        import PyInstaller
        print(f"‚úÖ PyInstaller {PyInstaller.__version__} encontrado")
    except ImportError:
        print("‚ùå PyInstaller n√£o encontrado. Instalando...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller==6.3.0"])
    
    # Limpa builds anteriores
    if os.path.exists("build"):
        shutil.rmtree("build")
        print("üóëÔ∏è Pasta build anterior removida")
    
    if os.path.exists("dist"):
        shutil.rmtree("dist")
        print("üóëÔ∏è Pasta dist anterior removida")
    
    # Comando do PyInstaller
    cmd = [
        "pyinstaller",
        "--onefile",                    # Arquivo √∫nico
        "--windowed",                   # Sem console (Windows)
        "--name=AnalisadorTributos",    # Nome do execut√°vel
        "--icon=icon.ico",              # √çcone (se existir)
        "--add-data=.env;.",           # Inclui arquivo .env
        "--hidden-import=pdfplumber",   # Imports ocultos
        "--hidden-import=openai",
        "--hidden-import=requests",
        "--hidden-import=dotenv",
        "--clean",                      # Limpa cache
        "app_desktop.py"
    ]
    
    # Remove √≠cone se n√£o existir
    if not os.path.exists("icon.ico"):
        cmd.remove("--icon=icon.ico")
        print("‚ÑπÔ∏è √çcone n√£o encontrado, continuando sem √≠cone")
    
    # Remove .env se n√£o existir
    if not os.path.exists(".env"):
        cmd.remove("--add-data=.env;.")
        print("‚ÑπÔ∏è Arquivo .env n√£o encontrado, continuando sem ele")
    
    print(f"üî® Executando: {' '.join(cmd)}")
    
    try:
        # Executa PyInstaller
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        
        print("‚úÖ Build conclu√≠do com sucesso!")
        
        # Verifica se o execut√°vel foi criado
        exe_path = Path("dist/AnalisadorTributos.exe")
        if exe_path.exists():
            size_mb = exe_path.stat().st_size / (1024 * 1024)
            print(f"üì¶ Execut√°vel criado: {exe_path} ({size_mb:.1f} MB)")
            
            # Cria pasta de distribui√ß√£o
            dist_folder = Path("AnalisadorTributos_v1.0")
            if dist_folder.exists():
                shutil.rmtree(dist_folder)
            
            dist_folder.mkdir()
            
            # Copia execut√°vel
            shutil.copy2(exe_path, dist_folder / "AnalisadorTributos.exe")
            
            # Cria arquivo README
            readme_content = """# üìä Analisador de Tributos em PDFs

## üöÄ Como usar:

1. **Execute** o arquivo `AnalisadorTributos.exe`
2. **Selecione** um arquivo PDF de Di√°rio Oficial
3. **Digite** os tributos que deseja buscar (ex: ISS, ISSQN, IPTU)
4. **Clique** em "Analisar PDF"
5. **Visualize** os resultados na tabela
6. **Exporte** para CSV se necess√°rio

## üîß Configura√ß√£o da API Maritaca (Opcional):

- Para melhor identifica√ß√£o de empresas, configure sua chave da API Maritaca
- Acesse: https://plataforma.maritaca.ai/chaves-de-api
- Cole a chave no campo "Chave da API" e clique em "Salvar"
- **Sem a chave, o sistema funciona apenas com regex (j√° muito eficiente)**

## üìã Tributos suportados:

- ISS (Imposto Sobre Servi√ßos)
- ISSQN (Imposto Sobre Servi√ßos de Qualquer Natureza)
- IPTU (Imposto Predial e Territorial Urbano)
- ITBI (Imposto de Transmiss√£o de Bens Im√≥veis)
- ICMS (Imposto sobre Circula√ß√£o de Mercadorias e Servi√ßos)
- COFINS (Contribui√ß√£o para o Financiamento da Seguridade Social)
- PIS (Programa de Integra√ß√£o Social)
- CSLL (Contribui√ß√£o Social sobre o Lucro L√≠quido)

## ‚ö†Ô∏è Requisitos:

- Windows 10 ou superior
- Arquivos PDF com texto (n√£o escaneados)
- Conex√£o com internet (apenas para API Maritaca)

## üÜò Suporte:

Em caso de problemas, verifique:
- Se o PDF cont√©m texto (n√£o √© apenas imagem)
- Se os tributos est√£o escritos corretamente
- Se h√° conex√£o com internet (para API)

---
**Vers√£o 1.0 - Desenvolvido para an√°lise de Di√°rios Oficiais Municipais**
"""
            
            with open(dist_folder / "README.txt", "w", encoding="utf-8") as f:
                f.write(readme_content)
            
            print(f"üìÅ Pasta de distribui√ß√£o criada: {dist_folder}")
            print("üéâ Build finalizado! Pronto para distribui√ß√£o.")
            
        else:
            print("‚ùå Execut√°vel n√£o encontrado ap√≥s build")
            
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro durante build: {e}")
        print(f"Sa√≠da: {e.stdout}")
        print(f"Erro: {e.stderr}")
        return False
    
    return True

def create_spec_file():
    """Cria arquivo .spec personalizado para builds avan√ßadas"""
    spec_content = """# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['app_desktop.py'],
    pathex=[],
    binaries=[],
    datas=[('.env', '.') if os.path.exists('.env') else None],
    hiddenimports=['pdfplumber', 'openai', 'requests', 'dotenv'],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

# Remove None entries
a.datas = [x for x in a.datas if x is not None]

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='AnalisadorTributos',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='icon.ico' if os.path.exists('icon.ico') else None,
)
"""
    
    with open("AnalisadorTributos.spec", "w", encoding="utf-8") as f:
        f.write(spec_content)
    
    print("üìù Arquivo .spec criado para builds personalizadas")

if __name__ == "__main__":
    print("=" * 60)
    print("üèóÔ∏è  GERADOR DE EXECUT√ÅVEL - ANALISADOR DE TRIBUTOS")
    print("=" * 60)
    
    # Verifica se est√° no diret√≥rio correto
    if not os.path.exists("app_desktop.py"):
        print("‚ùå Arquivo app_desktop.py n√£o encontrado!")
        print("Execute este script na pasta do projeto.")
        sys.exit(1)
    
    # Cria arquivo .spec
    create_spec_file()
    
    # Constr√≥i execut√°vel
    success = build_executable()
    
    if success:
        print("\n" + "=" * 60)
        print("‚úÖ BUILD CONCLU√çDO COM SUCESSO!")
        print("üì¶ Execut√°vel dispon√≠vel na pasta 'AnalisadorTributos_v1.0'")
        print("üöÄ Pronto para distribui√ß√£o!")
        print("=" * 60)
    else:
        print("\n" + "=" * 60)
        print("‚ùå BUILD FALHOU!")
        print("Verifique os erros acima e tente novamente.")
        print("=" * 60)
        sys.exit(1) 